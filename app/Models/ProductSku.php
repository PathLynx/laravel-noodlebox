<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;



/**
 * App\Models\ProductSku
 *
 * @property int $id SKU ID
 * @property int $product_id 商品ID
 * @property string|null $title SKU名称
 * @property string|null $image 图片
 * @property string $price 价格
 * @property int $stock 库存
 * @property string|null $code SKU编码
 * @property-read \App\Models\Product|null $product
 * @method static Builder|ProductSku newModelQuery()
 * @method static Builder|ProductSku newQuery()
 * @method static Builder|ProductSku query()
 * @method static Builder|ProductSku whereCode($value)
 * @method static Builder|ProductSku whereId($value)
 * @method static Builder|ProductSku whereImage($value)
 * @method static Builder|ProductSku wherePrice($value)
 * @method static Builder|ProductSku whereProductId($value)
 * @method static Builder|ProductSku whereStock($value)
 * @method static Builder|ProductSku whereTitle($value)
 * @mixin \Eloquent
 */
class ProductSku extends Model
{
    protected $table = 'product_sku';
    protected $primaryKey = 'id';
    protected $fillable = ['product_id', 'title', 'image', 'code', 'price', 'stock'];

    public $timestamps = false;

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope('sort', function (Builder $builder) {
            return $builder->orderBy('id');
        });
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function product()
    {
        return $this->belongsTo(Product::class, 'product_id', 'id');
    }

    /**
     * @param $amount
     * @return false|int
     */
    public function increaseStock($amount)
    {
        return $this->increment('stock', $amount);
    }

    /**
     * @param $amount
     * @return false|int
     */
    public function decreaseStock($amount)
    {
        return $this->newQuery()->whereKey($this->id)
            ->where('stock', '>=', $amount)
            ->decrement('stock', $amount);
    }
}
