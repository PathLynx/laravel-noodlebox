<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Setting
 *
 * @property string $skey 标识
 * @property string|null $svalue 值
 * @method static \Illuminate\Database\Eloquent\Builder|Setting newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Setting newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Setting query()
 * @method static \Illuminate\Database\Eloquent\Builder|Setting whereSkey($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Setting whereSvalue($value)
 * @mixin \Eloquent
 */
class Setting extends Model
{
    protected $table = 'setting';
    protected $primaryKey = 'skey';
    protected $keyType = 'string';
    protected $fillable = ['skey', 'svalue'];

    public $timestamps = false;
    public $incrementing = false;

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::saved(function () {
            cache()->forget('settings');
        });

        static::deleted(function () {
            cache()->forget('settings');
        });
    }

    public function getSvalueAttribute($value)
    {
        $svalue = json_decode($value);
        if (is_null($svalue)) {
            return $value;
        }

        return $svalue;
    }

    public function setSvalueAttribute($value)
    {
        if (is_array($value)) {
            $this->attributes['svalue'] = json_encode($value);
        }else{
            $this->attributes['svalue'] = $value;
        }
    }

    /**
     * @return mixed
     * @throws \Exception
     */
    public static function settingsFromCache()
    {
        return cache()->rememberForever('settings', function () {
            return Setting::get()->pluck('svalue', 'skey');
        });
    }
}
